/*
 * tegra194-camera-imx464.dtsi - imx464 sensor device tree
 *
 * Copyright (c) 2019. FRAMOS.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>

/ {
	host1x {
		vi@15c10000  {
			num-channels = <4>;
			framos_channel;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				vi_port0: port@0 {
					reg = <0>;
                    status = "okay";
					imx464_vi_in0: endpoint {
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&imx464_csi_out0>;
                        status = "okay";
					};
				};
				vi_port1: port@1 {
					reg = <1>;
                    status = "okay";
                    imx464_vi_in2: endpoint {
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&imx464_csi_out2>;
                        status = "okay";
					};
				};
                 vi_port2: port@2 {
					reg = <2>;
                    status = "okay";
                    imx464_vi_in3: endpoint {
						port-index = <3>;
						bus-width = <2>;
						remote-endpoint = <&imx464_csi_out3>;
                        status = "okay";
					};
				};
				vi_port3: port@3 {
					reg = <3>;
                    status = "okay";
					imx464_vi_in4: endpoint {
						port-index = <4>;
						bus-width = <2>;
						remote-endpoint = <&imx464_csi_out4>;
                        status = "okay";
					};
				};
			};
		};

		nvcsi@15a00000 {
			num-channels = <4>;
			#address-cells = <1>;
			#size-cells = <0>;
			csi_chan0: channel@0 {
				reg = <0>;
                status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan0_port0: port@0 {
						reg = <0>;
                        status = "okay";
						imx464_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&imx464_out0_0>;
                            status = "okay";
						};
					};
					csi_chan0_port1: port@1 {
						reg = <1>;
                        status = "okay";
						imx464_csi_out0: endpoint@1 {
							remote-endpoint = <&imx464_vi_in0>;
                            status = "okay";
						};
					};
				};
			};
            csi_chan1: channel@1 {
				reg = <1>;
                status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
                    csi_chan1_port0: port@2 {
						reg = <0>;
                        status = "okay";
						imx464_csi_in2: endpoint@2 {
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&imx464_out1_0>;
                            status = "okay";
						};
					};
					csi_chan1_port1: port@3 {
						reg = <1>;
                        status = "okay";
						imx464_csi_out2: endpoint@3 {
							remote-endpoint = <&imx464_vi_in2>;
                            status = "okay";
						};
					};
				};
			};
            csi_chan2: channel@2 {
				reg = <2>;
                status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
                    csi_chan2_port0: port@4 {
						reg = <0>;
                        status = "okay";
						imx464_csi_in3: endpoint@4 {
							port-index = <3>;
							bus-width = <2>;
							remote-endpoint = <&imx464_out2_0>;
                            status = "okay";
						};
					};
					csi_chan2_port1: port@5 {
						reg = <1>;
                        status = "okay";
						imx464_csi_out3: endpoint@5 {
							remote-endpoint = <&imx464_vi_in3>;
                            status = "okay";
						};
					};
				};
			};
			csi_chan3: channel@3 {
				reg = <3>;
                status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan3_port0: port@6 {
						reg = <0>;
                        status = "okay";
						imx464_csi_in4: endpoint@6 {
							port-index = <4>;
							bus-width = <2>;
							remote-endpoint = <&imx464_out3_0>;
                            status = "okay";
						};
					};
					csi_chan3_port1: port@7 {
						reg = <1>;
                        status = "okay";
						imx464_csi_out4: endpoint@7 {
							remote-endpoint = <&imx464_vi_in4>;
                            status = "okay";
						};
					};
				};
			};
		};
    };


    i2c@3180000 {
    	tca9548@70 {
		    i2c@0 {
			    imx464_a@1a {
				    compatible = "framos,imx464";
				    reg = <0x1a>;

				    devnode = "video0";

		            physical_w = "15.0";
		            physical_h = "12.5";

				    sensor_model ="imx464";

				    /* Define any required hw resources needed by driver */
			        /* ie. clocks, io pins, power sources */

			        /* Defines number of frames to be dropped by driver internally after applying */
			        /* sensor crop settings. Some sensors send corrupt frames after applying */
			        /* crop co-ordinates */
			        post_crop_frame_drop = "0";

	                /* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
	                use_decibel_gain = "true";

	                /* if true, delay gain setting by one frame to be in sync with exposure */
	                delayed_gain = "false";

	                /* enable CID_SENSOR_MODE_ID for sensor modes selection */
	                use_sensor_mode_id = "false";

			        /**
			        * ==== Modes ====
			        * A modeX node is required to support v4l2 driver
			        * implementation with NVIDIA camera software stack
			        *
			        * == Signal properties ==
			        *
			        * phy_mode = "";
			        * PHY mode used by the MIPI lanes for this device
			        *
			        * tegra_sinterface = "";
			        * CSI Serial interface connected to tegra
			        * Incase of virtual HW devices, use virtual
			        * For SW emulated devices, use host
			        *
			        * pix_clk_hz = "";
			        * Sensor pixel clock used for calculations like exposure and framerate
			        *
			        * readout_orientation = "0";
			        * Based on camera module orientation.
			        * Only change readout_orientation if you specifically
			        * Program a different readout order for this mode
			        *
			        * == Image format Properties ==
			        *
			        * active_w = "";
			        * Pixel active region width
			        *
			        * active_h = "";
			        * Pixel active region height
			        *
			        * pixel_t = "";
			        * The sensor readout pixel pattern
			        *
			        * line_length = "";
			        * Pixel line length (width) for sensor mode.
			        *
			        * == Source Control Settings ==
			        *
			        * Gain factor used to convert fixed point integer to float
			        * Gain range [min_gain/gain_factor, max_gain/gain_factor]
			        * Gain step [step_gain/gain_factor is the smallest step that can be configured]
			        * Default gain [Default gain to be initialized for the control.
			        *     use min_gain_val as default for optimal results]
			        * Framerate factor used to convert fixed point integer to float
			        * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
			        * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
			        * Default Framerate [Default framerate to be initialized for the control.
			        *     use max_framerate to get required performance]
			        * Exposure factor used to convert fixed point integer to float
			        * For convenience use 1 sec = 1000000us as conversion factor
			        * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
			        * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
			        * Default Exposure Time [Default exposure to be initialized for the control.
			        *     Set default exposure based on the default_framerate for optimal exposure settings]
			        *
			        * gain_factor = ""; (integer factor used for floating to fixed point conversion)
			        * min_gain_val = ""; (ceil to integer)
			        * max_gain_val = ""; (ceil to integer)
			        * step_gain_val = ""; (ceil to integer)
			        * default_gain = ""; (ceil to integer)
			        * Gain limits for mode
			        *
			        * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
			        * min_exp_time = ""; (ceil to integer)
			        * max_exp_time = ""; (ceil to integer)
			        * step_exp_time = ""; (ceil to integer)
			        * default_exp_time = ""; (ceil to integer)
			        * Exposure Time limits for mode (sec)
			        *
			        * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
			        * min_framerate = ""; (ceil to integer)
			        * max_framerate = ""; (ceil to integer)
			        * step_framerate = ""; (ceil to integer)
			        * default_framerate = ""; (ceil to integer)
			        * Framerate limits for mode (fps)
			        *
			        * embedded_metadata_height = "";
			        * Sensor embedded metadata height in units of rows.
			        * If sensor does not support embedded metadata value should be 0.
			        */

				    mode0 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800"; // doesnt effect FPS
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000"; // doesnt effect FPS

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "90000000"; /* 90 */
					    step_framerate = "1";
					    default_framerate= "90000000";
					    exposure_factor = "1000000";
					    min_exp_time = "6"; /* us */
					    max_exp_time = "660000"; /* us */ //set on max, ganges are dynamic
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode1 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "124000000"; /* 124 */
					    step_framerate = "1";
					    default_framerate= "120000000";
					    exposure_factor = "1000000";
					    min_exp_time = "6"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode2 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "60000000"; /* 60 */
					    step_framerate = "1";
					    default_framerate = "60000000";
					    exposure_factor = "1000000";
					    min_exp_time = "10"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode3 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "83000000"; /* 83 */
					    step_framerate = "1";
					    default_framerate= "60000000";
					    exposure_factor = "1000000";
					    min_exp_time = "10"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};

				    ports {
					    #address-cells = <1>;
					    #size-cells = <0>;

					    port@0 {
						    reg = <0>;
						    imx464_out0_0: endpoint {
							    port-index = <0>;
							    bus-width = <2>;
							    remote-endpoint = <&imx464_csi_in0>;
						    };
					    };
				    };
			    };
		    };

		    i2c@1 {
			    imx464_c@1a {
				    compatible = "framos,imx464";
				    reg = <0x1a>;

				    devnode = "video1";

		            physical_w = "15.0";
		            physical_h = "12.5";

				    sensor_model ="imx464";

				    /* Define any required hw resources needed by driver */
			        /* ie. clocks, io pins, power sources */

			        /* Defines number of frames to be dropped by driver internally after applying */
			        /* sensor crop settings. Some sensors send corrupt frames after applying */
			        /* crop co-ordinates */
			        post_crop_frame_drop = "0";

			        /* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
			        use_decibel_gain = "true";

			        /* if true, delay gain setting by one frame to be in sync with exposure */
			        delayed_gain = "false";

			        /* enable CID_SENSOR_MODE_ID for sensor modes selection */
			        use_sensor_mode_id = "false";

				    mode0 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800"; // doesnt effect FPS
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000"; // doesnt effect FPS

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "30000000"; /* 30 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */ //set on max, ganges are dynamic
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode1 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "41000000"; /* 41 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode2 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "30000000"; /* 30 */
					    step_framerate = "1";
					    default_framerate = "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode3 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "41000000"; /* 41 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};

				    ports {
					    #address-cells = <1>;
					    #size-cells = <0>;

					    port@0 {
						    reg = <0>;
						    imx464_out1_0: endpoint {
							    port-index = <2>;
							    bus-width = <2>;
							    remote-endpoint = <&imx464_csi_in2>;
						    };
					    };
				    };
			    };
		    };

            i2c@2 {
			    imx464_d@1a {
				    compatible = "framos,imx464";
				    reg = <0x1a>;

				    devnode = "video2";

		            physical_w = "15.0";
		            physical_h = "12.5";

				    sensor_model ="imx464";

				    /* Define any required hw resources needed by driver */
			        /* ie. clocks, io pins, power sources */

			        /* Defines number of frames to be dropped by driver internally after applying */
			        /* sensor crop settings. Some sensors send corrupt frames after applying */
			        /* crop co-ordinates */
			        post_crop_frame_drop = "0";

			        /* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
			        use_decibel_gain = "true";

			        /* if true, delay gain setting by one frame to be in sync with exposure */
			        delayed_gain = "false";

			        /* enable CID_SENSOR_MODE_ID for sensor modes selection */
			        use_sensor_mode_id = "false";

				    mode0 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800"; // doesnt effect FPS
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000"; // doesnt effect FPS

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "30000000"; /* 30 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */ //set on max, ganges are dynamic
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode1 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "41000000"; /* 41 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode2 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "30000000"; /* 30 */
					    step_framerate = "1";
					    default_framerate = "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode3 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "41000000"; /* 41 */
					    step_framerate = "1";
					    default_framerate= "30000000";
					    exposure_factor = "1000000";
					    min_exp_time = "20"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};

				    ports {
					    #address-cells = <1>;
					    #size-cells = <0>;

					    port@0 {
						    reg = <0>;
						    imx464_out2_0: endpoint {
							    port-index = <3>;
							    bus-width = <2>;
							    remote-endpoint = <&imx464_csi_in3>;
						    };
					    };
				    };
			    };
		    };

            i2c@3 {
			    imx464_e@1a {
				    compatible = "framos,imx464";
				    reg = <0x1a>;

				    devnode = "video3";

		            physical_w = "15.0";
		            physical_h = "12.5";

				    sensor_model ="imx464";

				    /* Define any required hw resources needed by driver */
			        /* ie. clocks, io pins, power sources */

			        /* Defines number of frames to be dropped by driver internally after applying */
			        /* sensor crop settings. Some sensors send corrupt frames after applying */
			        /* crop co-ordinates */
			        post_crop_frame_drop = "0";

	                /* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
	                use_decibel_gain = "true";

	                /* if true, delay gain setting by one frame to be in sync with exposure */
	                delayed_gain = "false";

	                /* enable CID_SENSOR_MODE_ID for sensor modes selection */
	                use_sensor_mode_id = "false";

				    mode0 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800"; // doesnt effect FPS
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000"; // doesnt effect FPS

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "90000000"; /* 90 */
					    step_framerate = "1";
					    default_framerate= "90000000";
					    exposure_factor = "1000000";
					    min_exp_time = "6"; /* us */
					    max_exp_time = "660000"; /* us */ //set on max, ganges are dynamic
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode1 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "10";
						csi_pixel_bit_depth = "10";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "124000000"; /* 124 */
					    step_framerate = "1";
					    default_framerate= "120000000";
					    exposure_factor = "1000000";
					    min_exp_time = "6"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode2 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "2712";
						active_h = "1538";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "60000000"; /* 60 */
					    step_framerate = "1";
					    default_framerate = "60000000";
					    exposure_factor = "1000000";
					    min_exp_time = "10"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};
					mode3 { //
						mclk_khz = "37125";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
                        phy_mode = "DPHY";
						discontinuous_clk = "no";
                        dpcm_enable = "false";
						cil_settletime = "0";
						active_w = "1920";
						active_h = "1080";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "rggb";

						readout_orientation = "0";
						line_length = "2800";
						inherent_gain = "1";
						mclk_multiplier = "40.40";
						pix_clk_hz = "1000000000";

					    gain_factor = "10";
					    min_gain_val = "0"; /* 0dB */
					    max_gain_val = "720"; /* 72dB */
					    step_gain_val = "3"; /* 0.3 */
					    default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "64";
					    framerate_factor = "1000000";
					    min_framerate = "1500000"; /* 1.5 */
					    max_framerate = "83000000"; /* 83 */
					    step_framerate = "1";
					    default_framerate= "60000000";
					    exposure_factor = "1000000";
					    min_exp_time = "10"; /* us */
					    max_exp_time = "660000"; /* us */
					    step_exp_time = "1";
					    default_exp_time = "10000";/* us */
					    embedded_metadata_height = "1";
					};

                    ports {
					    #address-cells = <1>;
					    #size-cells = <0>;

					    port@0 {
						    reg = <0>;
						    imx464_out3_0: endpoint {
							    port-index = <4>;
							    bus-width = <2>;
							    remote-endpoint = <&imx464_csi_in4>;
						    };
					    };
				    };
                };
            };
        };
	};
};

/* camera control gpio definitions */
/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <12>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
        max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. “rear” or “front”.
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vender.
		 */
		modules {
			cam_module0: module0 {
				badge = "imx464_bottomleft_framos";
				position = "bottomleft";
				orientation = "1";
                status = "okay";
				cam_module0_drivernode0: drivernode0 {
                    status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "imx464 30-001a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@0/imx464_a@1a";
				};
			};
			cam_module1: module1 {
				badge = "imx464_centerright_framos";
				position = "centerright";
				orientation = "1";
                status = "okay";
				cam_module1_drivernode0: drivernode0 {
                    status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "imx464 31-001a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@1/imx464_c@1a";
				};
			};
            cam_module2: module2 {
				badge = "imx464_bottomright_framos";
				position = "bottomright";
				orientation = "1";
                status = "okay";
				cam_module2_drivernode0: drivernode0 {
                    status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "imx464 32-001a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@2/imx464_d@1a";
				};
			};
            cam_module3: module3 {
				badge = "imx464_center_framos";
				position = "topright";
				orientation = "1";
                status = "okay";
				cam_module3_drivernode0: drivernode0 {
                    status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "imx464 33-001a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@3/imx464_e@1a";
				};
			};
		};
	};
};
