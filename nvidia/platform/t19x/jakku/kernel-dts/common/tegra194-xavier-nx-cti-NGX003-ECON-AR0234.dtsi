/*
 * Copyright (c) 2018-2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>

#define CAM0_PWDN	TEGRA194_MAIN_GPIO(P, 4)
#define CAM1_PWDN	TEGRA194_MAIN_GPIO(P, 5)
#define CAM_I2C_MUX 	TEGRA194_AON_GPIO(CC, 3)

/* Enable Six overlays in Jetson Xavier NX */
&head0 {
	win-mask = <0x3f>;
};

/ {
i2c@3180000{
	tca9546@70{ //was cam_i2cmux
			compatible = "nxp,pca9544";
			reg = <0x70>;
			#address-cells = <1>;
			#size-cells = <0>;			
			//skip_mux_detect = "yes";
			vif-supply = <&p3509_vdd_1v8_cvb>;
			vcc-supply = <&p3509_vdd_1v8_cvb>;
			vcc_lp = "vcc";
		i2c@0 {
			reg = <0>;
			#address-cells = <1>;
			#size-cells = <0>;
			i2c-mux,deselect-on-exit;
		tca6424_22_a: tca6424@22 {
			    compatible = "ti,tca6424";
			    gpio-controller;
			    #gpio-cells = <2>;
			    reg = <0x22>;
			    vcc-supply = <&p3509_vdd_sys_en>;
			    status = "okay";
			    tca6424_22_outlow {
			    	/*
				 * GPIO-0 : RST_CAM1
				 * GPIO-1 : RST_CAM2
				 * GPIO-2 : RST_CAM3
				 * .... more is there
				 */
				 gpio-hog;
				 gpios = <0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0>;
				 output-low;
				 label = "tca6424_22_outlow_0",
				         "tca6424_22_outlow_1",
				         "tca6424_22_outlow_2",
				         "tca6424_22_outlow_3",
				         "tca6424_22_outlow_4",
				         "tca6424_22_outlow_5",
				         "tca6424_22_outlow_6",
				         "tca6424_22_outlow_7";
			    };
			    tca6424_22_outhigh {
			            status = "disabled";
			    };
			    tca6424_22_input {
			            status = "disabled";
			    };
			    
			};
			/*
			ecam_ar0234_a@42 {
				reset-gpios = <&tca6424_22_a 0 GPIO_ACTIVE_HIGH>;
				pwdn-gpios  = <&tca6424_22_a 6 GPIO_ACTIVE_HIGH>;
			};
			*/
		};
		i2c@1 {
			reg = <1>;
			#address-cells = <1>;
			#size-cells = <0>;
			i2c-mux,deselect-on-exit;
			tca6424_22_b: tca6424@22 {
			    compatible = "ti,tca6424";
			    gpio-controller;
			    #gpio-cells = <2>;
			    reg = <0x22>;
			    vcc-supply = <&p3509_vdd_sys_en>;
			    status = "okay";
			    tca6424_22_outlow {
			    	/*
				 * GPIO-0 : RST_CAM1
				 * GPIO-1 : RST_CAM2
				 * GPIO-2 : RST_CAM3
				 * .... more is there
				 */
				 gpio-hog;
				 gpios = <0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0>;
				 output-low;
				 label = "tca6424_22_outlow_0",
				         "tca6424_22_outlow_1",
				         "tca6424_22_outlow_2",
				         "tca6424_22_outlow_3",
				         "tca6424_22_outlow_4",
				         "tca6424_22_outlow_5",
				         "tca6424_22_outlow_6",
				         "tca6424_22_outlow_7";
			    };
			    tca6424_22_outhigh {
			            status = "disabled";
			    };
			    tca6424_22_input {
			            status = "disabled";
			    };
			    
			};
		};
	};
};
	gpio@2200000 {
		camera-control-output-low {
			gpio-hog;
			output-low;
			gpios = <CAM0_PWDN 0 CAM1_PWDN 0>;
			label = "cam0-pwdn","cam1-pwdn";
		};
	};
};


/ {
	host1x {
		vi@15c10000  {
			num-channels = <2>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				vi_port0: port@0 {
					reg = <0>;
					ecam_ar0234_vi_in0: endpoint {
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&ecam_ar0234_csi_out0>;
					};
				};
				vi_port1: port@1 {
					reg = <1>;
					ecam_ar0234_vi_in1: endpoint {
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&ecam_ar0234_csi_out1>;
					};
				};
			};
		};

		nvcsi@15a00000 {
			num-channels = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			csi_chan0: channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan0_port0: port@0 {
						reg = <0>;
						ecam_ar0234_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&ecam_ar0234_out0>;
						};
					};
					csi_chan0_port1: port@1 {
						reg = <1>;
						ecam_ar0234_csi_out0: endpoint@1 {
							remote-endpoint = <&ecam_ar0234_vi_in0>;
						};
					};
				};
			};
			csi_chan1: channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan1_port0: port@0 {
						reg = <0>;
						ecam_ar0234_csi_in1: endpoint@2 {
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&ecam_ar0234_out1>;
						};
					};
					csi_chan1_port1: port@1 {
						reg = <1>;
						ecam_ar0234_csi_out1: endpoint@3 {
							remote-endpoint = <&ecam_ar0234_vi_in1>;
						};
					};
				};
			};
		};
	};
i2c@3180000{
	tca9546@70 { //was cam_i2cmux
		i2c_0:i2c@0 {
			ar0234_cam0: ecam_ar0234_a@42 {
				compatible = "nvidia,ar0234";
				/* I2C device address */
				reg = <0x42>;

				/* V4L2 device node location */
				devnode = "video0";
				status = "okay";
				/* Physical dimensions of sensor */
				physical_w = "3.680";
				physical_h = "2.760";

				sensor_model = "ar0234";
				reset-gpios = <&tca6424_22_a 1 GPIO_ACTIVE_HIGH>;
				pwdn-gpios  = <&tca6424_22_a 2 GPIO_ACTIVE_HIGH>;
				//Default use_sensor_mode_id is false
				/*use_sensor_mode_id = "false";*/
				camera_mipi_lanes = <2>;
				camera-mipi-clk = <1200>;
				disable-framesync;
				mode0 { /* AR0234_MODE_1280x720_120FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					dynamic_pixel_bit_depth = "16";
					csi_pixel_bit_depth = "16";
					mode_type = "yuv";
					
					active_w = "1280";
					active_h = "720";
					/* pixel_t = "uyvy";*/
					pixel_phase = "uyvy";
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					min_gain_val = "16";
					max_gain_val = "170"; /* 10.66x */
					step_gain_val = "1";
					default_gain = "16"; /* 1.00x */
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "120000000";
					step_framerate = "1";
					default_framerate = "120000000";
					min_exp_time = "13"; /* us */
					max_exp_time = "683709"; /* us */

					embedded_metadata_height = "0";
				};
				mode1 { /* AR0234_MODE_1920x1080_65FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					dynamic_pixel_bit_depth = "16";					    
					csi_pixel_bit_depth = "16";
					active_w = "1920";
					active_h = "1080";
					pixel_phase = "uyvy";
					mode_type = "yuv";
					/*pixel_t = "bayer_rggb";*/
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					min_gain_val = "16";
					max_gain_val = "170";
					step_gain_val = "1";
					default_gain = "16";
					
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "120000000"; /* 28.0 fps */
					step_framerate = "1";
					default_framerate = "7000000";
					
					min_exp_time = "13";
					max_exp_time = "683709";
					step_exp_time = "1";
					default_exp_time = "2495";

					embedded_metadata_height = "0";
				};
				mode2 { /* AR0234_MODE_1920x1200_60FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					csi_pixel_bit_depth = "16";
					active_w = "1920";
					active_h = "1200";
					/*pixel_t = "uyvy";*/
					pixel_phase = "uyvy";
					mode_type = "yuv";
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					gain_factor = "16";
					framerate_factor = "1000000";
					exposure_factor = "1000000";
					
					min_gain_val = "16";
					max_gain_val = "170"; /* 10.66x */
					step_gain_val = "1";
					default_gain = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "12000000"; /* 60.0 fps */
					default_framerate = "60000000"; /* 60.0 fps */
					step_framerate = "1";
					min_exp_time = "13"; /* us */
					max_exp_time = "683709"; /* us */
					step_exp_time = "1";
					default_exp_time = "2495";
					embedded_metadata_height = "0";
				};
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ecam_ar0234_out0: endpoint {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&ecam_ar0234_csi_in0>;
						};
					};
				};
			};
		};
		i2c_1: i2c@1 {
			ar0234_cam1: ecam_ar0234_c@42 {
				compatible = "nvidia,ar0234";
				/* I2C device address */
				reg = <0x42>;

				/* V4L2 device node location */
				devnode = "video1";
				status = "okay";
				/* Physical dimensions of sensor */
				physical_w = "3.680";
				physical_h = "2.760";

				sensor_model = "ar0234";
				camera_mipi_lanes = <2>;
				camera-mipi-clk = <1200>;
				disable-framesync;
				reset-gpios = <&tca6424_22_b 1 GPIO_ACTIVE_HIGH>;
				pwdn-gpios  = <&tca6424_22_b 2 GPIO_ACTIVE_HIGH>;
				// Default use_sensor_mode_id is false
				/*use_sensor_mode_id = "false";*/

				/**
				* ==== Modes ====
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* == Signal properties ==
				*
				* phy_mode = "";
				* PHY mode used by the MIPI lanes for this device
				*
				* tegra_sinterface = "";
				* CSI Serial interface connected to tegra
				* Incase of virtual HW devices, use virtual
				* For SW emulated devices, use host
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* == Image format Properties ==
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				*
				* == Source Control Settings ==
				*
				* Gain factor used to convert fixed point integer to float
				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
				* Default gain [Default gain to be initialized for the control.
				*     use min_gain_val as default for optimal results]
				* Framerate factor used to convert fixed point integer to float
				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
				* Default Framerate [Default framerate to be initialized for the control.
				*     use max_framerate to get required performance]
				* Exposure factor used to convert fixed point integer to float
				* For convenience use 1 sec = 1000000us as conversion factor
				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
				* Default Exposure Time [Default exposure to be initialized for the control.
				*     Set default exposure based on the default_framerate for optimal exposure settings]
				*
				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_gain_val = ""; (ceil to integer)
				* max_gain_val = ""; (ceil to integer)
				* step_gain_val = ""; (ceil to integer)
				* default_gain = ""; (ceil to integer)
				* Gain limits for mode
				*
				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* step_exp_time = ""; (ceil to integer)
				* default_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (sec)
				*
				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
				* min_framerate = ""; (ceil to integer)
				* max_framerate = ""; (ceil to integer)
				* step_framerate = ""; (ceil to integer)
				* default_framerate = ""; (ceil to integer)
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/
				mode0 { /* AR0234_MODE_1280x720_120FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					dynamic_pixel_bit_depth = "16";
					csi_pixel_bit_depth = "16";
					mode_type = "yuv";
					
					active_w = "1280";
					active_h = "720";
					/* pixel_t = "uyvy";*/
					pixel_phase = "uyvy";
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					min_gain_val = "16";
					max_gain_val = "170"; /* 10.66x */
					step_gain_val = "1";
					default_gain = "16"; /* 1.00x */
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "120000000";
					step_framerate = "1";
					default_framerate = "120000000";
					min_exp_time = "13"; /* us */
					max_exp_time = "683709"; /* us */

					embedded_metadata_height = "0";
				};
				mode1 { /* AR0234_MODE_1920x1080_65FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					dynamic_pixel_bit_depth = "16";					    
					csi_pixel_bit_depth = "16";
					active_w = "1920";
					active_h = "1080";
					pixel_phase = "uyvy";
					mode_type = "yuv";
					/*pixel_t = "bayer_rggb";*/
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					min_gain_val = "16";
					max_gain_val = "170";
					step_gain_val = "1";
					default_gain = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "120000000"; /* 28.0 fps */
					default_framerate = "70000000"; /* 60.0 fps */
					step_framerate = "1";
					
					min_exp_time = "13";
					max_exp_time = "683709";
					step_exp_time = "1";
					default_exp_time = "2495";

					embedded_metadata_height = "0";
				};
				mode2 { /* AR0234_MODE_1920x1200_60FPS */
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					phy_mode = "DPHY";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";
					csi_pixel_bit_depth = "16";
					active_w = "1920";
					active_h = "1200";
					/*pixel_t = "uyvy";*/
					pixel_phase = "uyvy";
					mode_type = "yuv";
					readout_orientation = "90";
					line_length = "3448";
					inherent_gain = "1";
					mclk_multiplier = "9.33";
					pix_clk_hz = "182400000";

					gain_factor = "16";
					default_gain = "16";
					step_gain_val = "1";
					framerate_factor = "1000000";
					exposure_factor = "1000000";
					
					min_gain_val = "16";
					max_gain_val = "170"; /* 10.66x */
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "2000000"; /* 2.0 fps */
					max_framerate = "120000000"; /* 60.0 fps */
					default_framerate = "60000000"; /* 60.0 fps */
					step_framerate = "1";
					min_exp_time = "13"; /* us */
					max_exp_time = "683709"; /* us */
					step_exp_time = "1";
					default_exp_time = "2495";
					embedded_metadata_height = "0";
				};


				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ecam_ar0234_out1: endpoint {
							status = "okay";
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&ecam_ar0234_csi_in1>;
						};
					};
				};
			};
		};
	};
};
};
/ {
	tcp: tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <16>;
		max_lane_speed = <2500000>;
		min_bits_per_pixel = <16>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <67>;


		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			cam_module0: module0 {
				     status = "okay";
				badge = "porg_front_ar0234";
				position = "front";
				orientation = "1";
				cam_module0_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0234 9-0010";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@0/ecam_ar0234_a@42";
				};
			};
			cam_module1: module1 {
			 	status = "okay";
				badge = "porg_rear_ar0234";
				position = "rear";
				orientation = "1";
				cam_module1_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0234 10-0010";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@1/ecam_ar0234_c@42";
				};
			};
		};
	};
};
